[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "My first post",
    "section": "",
    "text": "Hello guys!\nI will use the blog for sharing data science content.\nI hope you all like.\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/mape/index.html",
    "href": "posts/mape/index.html",
    "title": "MAPE and its pitfalls",
    "section": "",
    "text": "Hello guys! I want to talk a widely used metric, specially in time series modelling, which it is MAPE."
  },
  {
    "objectID": "posts/mape/index.html#why-mape-is-used",
    "href": "posts/mape/index.html#why-mape-is-used",
    "title": "MAPE and its pitfalls",
    "section": "Why MAPE is used",
    "text": "Why MAPE is used\nMAPE is a largely used metric because has the following benefits:\n\nIt is a percentage metric; so, it can be used to compare time series with different units.\nIt is largely used. People specially from other fields use it without knowing that are using it because it is so straight forward and natural.\n\nI will give an example for the last bit: Let’s suppose that a salesperson had to sell 100 pairs of boots, but he sold 80, so how far is he from the target? Well, (80-100)/100 = -0,20 = -20%. So the salesperson is 20% far from the target. The formula for MAPE can be described as:\n\\[\\text{MAPE} = \\frac{\\sum_{i=1}^{n} \\left| \\frac{y_i - \\hat{y}_i}{y_i} \\right|}{n}\\]\nwhich is so intuitive. However, behind this popularity, MAPE has several pitfalls, specially when working with high number of time series at the same time:"
  },
  {
    "objectID": "posts/mape/index.html#mape-is-a-biased-metric",
    "href": "posts/mape/index.html#mape-is-a-biased-metric",
    "title": "MAPE and its pitfalls",
    "section": "MAPE is a biased metric:",
    "text": "MAPE is a biased metric:\nTo give a simple example, let’s suppose that our ypred is 100; if the yreal is 150, we have a MAPE equals to 0.33, in constrat to MAPE equals 1 if yreal is 50. So, MAPE will always push toward to biased underforecasting.\nThe following table ilustrate this:\n\n\n\nTable 1: Ilustration of a case when MAPE is biased\n\n\ny_true\ny_pred\nMAE\nMAPE\nMSE\n\n\n\n\n100\n150\n50\n0.50\n2500\n\n\n100\n50\n50\n0.50\n2500\n\n\n150\n100\n50\n0.33\n2500\n\n\n50\n100\n50\n1.00\n2500\n\n\n\n\n\nCheck that MAE and MSE behave as expected (they don’t bias for under/over forecasts)."
  },
  {
    "objectID": "posts/mape/index.html#mape-is-not-define-when-y_true-is-zero",
    "href": "posts/mape/index.html#mape-is-not-define-when-y_true-is-zero",
    "title": "MAPE and its pitfalls",
    "section": "MAPE is not define when y_true is zero",
    "text": "MAPE is not define when y_true is zero\nThe denominator of mape is y_true. So, MAPE might return NaN on your programming software or Inf. In order to “fix” it, what many people do is to set y_true to a small value near to zero, which is what sklearn.metrics.mean_average_percentage_error do (setting y_true to \\(2.22x10^-16\\)). But it gives other problems: 1. Setting y_true to \\(2.22x10^-16\\) will lead to a even higher MAPE number; 2. You will never know a “true” value of the error for this series; 3. Your prediction will be compromised even if your predictions are really good (let’s say 0.00001); 4. If you need to concilliate the metric of this series with other series, your comparison will be compromised because the resulting MAPE will be towards a very high number.\nIn practical terms, see how MAPE will behave if for a true value of 0, we set 9E-17 for the last two rows of the table:\n\n\n\nTable 2: Impact in MAPE when y_true is zero or near zero\n\n\ny_true\ny_pred\nMAE\nMAPE\nMSE\n\n\n\n\n0\n0.5\n0.5\n#DIV/0!\n0.25\n\n\n0\n1.5\n1.5\n#DIV/0!\n2.25\n\n\n9E-17\n0.5\n0.5\n5.55x10^15\n0.25\n\n\n9E-17\n1.5\n1.5\n1.67x10^16\n2.25\n\n\n\n\n\nCheck that MAE and MSE behave as expected (are not impacted when y_true is zero or 9E-17).\nOthers also don’t calculate the forecast for these points, but you will end up with same problem as number 2."
  },
  {
    "objectID": "posts/mape/index.html#mape-does-not-minimizes-the-error-towards-the-mean-value",
    "href": "posts/mape/index.html#mape-does-not-minimizes-the-error-towards-the-mean-value",
    "title": "MAPE and its pitfalls",
    "section": "MAPE does not minimizes the error towards the mean value",
    "text": "MAPE does not minimizes the error towards the mean value\nThis is not a pitfall, but it is a warning, because usually people want to be right on average, and this is not what MAPE does. In constrast, it will give a prediction towards a biased median, if I can so.\nA very good resource to read about is shortcomings of MAPE, that will lead to many other resources."
  },
  {
    "objectID": "posts/ruff/index.html",
    "href": "posts/ruff/index.html",
    "title": "Ruff in a Nutshell + Configuring it on VsCode",
    "section": "",
    "text": "Hello guys!\nToday I want to talk about RUFF, my default formatter (and much more) for Python language.\nIn a nutshell, RUFF can be seen as a tool that performs all these tasks:\nRUFF = Flake8 + isort + black + pydocstyle + pyupgrade + autoflake\nFlake8 = Linter, which fix style + syntax errors\nisort = Sort the imports\nblack = formatter ; PEP8 complaint. Ex.: line-length: 88; Single/Double quotes; empty lines; parenthesis\npydocstyle = docstrings\npyupgrade = upgrade syntax for newer versions of python packages\nautoflake = Remove unused imports and unused variables\nSo, instead of having to set up each one individually, use RUFF and have all these tools into a single one. RUFF was written in rust, so it is not a wrap of the previously mentioned. Also, it is way faster than the previous tools."
  },
  {
    "objectID": "posts/ruff/index.html#setting-it-up-on-vscode",
    "href": "posts/ruff/index.html#setting-it-up-on-vscode",
    "title": "Ruff in a Nutshell + Configuring it on VsCode",
    "section": "Setting it up on VsCode",
    "text": "Setting it up on VsCode\nTo give suggestions on the fly, I use the Ruff VsCode Extension.\nBesides that, I have my settings.json with my personal preferences:\n// Use Ruff as the default formatter for Python files\n\"[python]\": {\n\"editor.defaultFormatter\": \"charliermarsh.ruff\",\n\"editor.codeActionsOnSave\": {\n    \"source.fixAll\": \"explicit\",\n    \"source.organizeImports\": \"explicit\"\n}\n},\n// Formatter for notebook cells\n\"[jupyter]\": {\n\"editor.defaultFormatter\": \"charliermarsh.ruff\"\n},\n// Enable format on save for notebooks\n\"notebook.formatOnSave.enabled\": true,\n// Disable other formatters to avoid conflicts\n\"editor.formatOnSave\": true,\nBut these are only global settings in my personal environment.\nWorking with others on the same project can be painful if you don’t have a default formatter (because other team members can have different formatters and specifications); as a result, code may change the formatting for a new user. Therefore, having a .vscode/settings.json inside of the folder of your project guarantees that everyone will use the same formatted. For that, just copy your personal settings to .vscode/settings.json.\nI also make Ruff as a default extension in .vscode/settings.json:\n{\n    \"recommendations\": [\n        \"charliermarsh.ruff\"\n    ]\n}\nLast but not least, you can also install ruff and your environment and implement it on your CI/CD routines. But it will not be covered here. Installing the extension and using the .vscode/settings.json guarantees that the suggestions will be made on the fly. But it depends on VsCode."
  },
  {
    "objectID": "posts/ruff/index.html#bonus-caveat",
    "href": "posts/ruff/index.html#bonus-caveat",
    "title": "Ruff in a Nutshell + Configuring it on VsCode",
    "section": "Bonus (Caveat)",
    "text": "Bonus (Caveat)\nI struggled to start using a tool like this because I used to write code in a single long line. I always received the E501: line-too-long warning from black. It happens when the number of characters in a line is longer than 79 characters, which is the recommendation in PEP 8. After applying a tool like ruff my code changed drastically (as it would force me to break lines), and it was uncomfortable in the beginning. So, I started to relax the parameter of the line-length a little bit (from 79 to for example, 150 characters) and started to analyze the impact of change. Then I realized that the impact on my previous code was not large at all.\nLeaving the limit as the default, PEP 8 argues that you can open multiple files side by side, making also easier to see the git diff changes.\nAnyway, if you think that this limit is small, you can relax it a little bit globally, doing it by:\n[tool.ruff]\nline-length = 130\n\nlint.ignore = [\n    \"E501\", # Ignore long lines\n    \"E302\", # Ignore blank lines issue\n    \"E701\", # Ignore single-line if statements\n]\nextend-include = [\"*.ipynb\"]\n\n[tool.ruff.format]\nquote-style = \"double\"\ndocstring-code-format = true\n\n[tool.ruff.lint.pydocstyle] # It enforces that all functions have docstrings\nconvention = \"google\"\nor skipping this rule by adding # fmt: skip at the end of a line. Or use #fmt: on at the beginning of a block and #fmt: off at the end.\nHappy coding."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Guilherme Parreira",
    "section": "",
    "text": "I am a senior data scientist at 4kst, a deep tech startup. I finished my bachelor’s degree in statistics in 2015, and my master’s in statistics in 2021. Between these two degrees, I ran my own statistical consultancy company GP Soluções em Estatística impacting over 200 researchers.\nI have a strong background in R, and since 2021 I am programming in Python almost everyday. Fell free to contact me.\nIn my leasure time, I like to travel, make a Brazilian barbecure, and do small repairs at my home.\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "MAPE and its pitfalls\n\n\n\nMAPE\n\n\nData Science\n\n\nTime Series\n\n\n\nWhy MAPE should not be your choice\n\n\n\nGuilherme Parreira\n\n\nMay 9, 2026\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMy first post\n\n\n\nWelcome\n\n\n\nIt says the purpose of my blog\n\n\n\nGuilherme Parreira\n\n\nSep 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRuff in a Nutshell + Configuring it on VsCode\n\n\n\nRuff\n\n\nPython\n\n\nVsCode\n\n\n\nIt explains Ruff and how to set up in VsCode\n\n\n\nGuilherme Parreira\n\n\nSep 1, 2024\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  }
]