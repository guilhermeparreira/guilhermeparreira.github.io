<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Guilherme Parreira</title>
<link>https://guilhermeparreira.github.io/posts.html</link>
<atom:link href="https://guilhermeparreira.github.io/posts.xml" rel="self" type="application/rss+xml"/>
<description>A data science blog</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Sat, 09 May 2026 03:00:00 GMT</lastBuildDate>
<item>
  <title>MAPE and its pitfalls</title>
  <dc:creator>Guilherme Parreira</dc:creator>
  <link>https://guilhermeparreira.github.io/posts/mape/</link>
  <description><![CDATA[ 





<div class="cell">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://guilhermeparreira.github.io/posts/mape/mape.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</div>
<p>Hello guys! I want to talk a widely used metric, specially in time series modelling, which it is MAPE.</p>
<section id="why-mape-is-used" class="level2">
<h2 class="anchored" data-anchor-id="why-mape-is-used">Why MAPE is used</h2>
<p>MAPE is a largely used metric because has the following benefits:</p>
<ul>
<li>It is a percentage metric; so, it can be used to compare time series with different units.</li>
<li>It is largely used. People specially from other fields use it without knowing that are using it because it is so straight forward and natural.</li>
</ul>
<p>I will give an example for the last bit: Let’s suppose that a salesperson had to sell 100 pairs of boots, but he sold 80, so how far is he from the target? Well, (80-100)/100 = -0,20 = -20%. So the salesperson is 20% far from the target. The formula for <code>MAPE</code> can be described as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BMAPE%7D%20=%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cleft%7C%20%5Cfrac%7By_i%20-%20%5Chat%7By%7D_i%7D%7By_i%7D%20%5Cright%7C%7D%7Bn%7D"></p>
<p>which is so intuitive. However, behind this popularity, MAPE has several pitfalls, specially when working with high number of time series at the same time:</p>
</section>
<section id="but" class="level1">
<h1>BUT:</h1>
<section id="mape-is-a-biased-metric" class="level2">
<h2 class="anchored" data-anchor-id="mape-is-a-biased-metric"><em>MAPE</em> is a biased metric:</h2>
<p>To give a simple example, let’s suppose that our <code>ypred</code> is 100; if the <code>yreal</code> is 150, we have a MAPE equals to 0.33, in constrat to MAPE equals 1 if <code>yreal</code> is 50. So, MAPE will always push toward to biased underforecasting.</p>
<p>The following table ilustrate this:</p>
<div style="width: 75%; margin: auto;">
<div id="tbl-biased" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-biased-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: Ilustration of a case when MAPE is biased
</figcaption>
<div aria-describedby="tbl-biased-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: right;">y_true</th>
<th style="text-align: right;">y_pred</th>
<th style="text-align: right;">MAE</th>
<th style="text-align: right;">MAPE</th>
<th style="text-align: right;">MSE</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">100</td>
<td style="text-align: right;">150</td>
<td style="text-align: right;">50</td>
<td style="text-align: right;">0.50</td>
<td style="text-align: right;">2500</td>
</tr>
<tr class="even">
<td style="text-align: right;">100</td>
<td style="text-align: right;">50</td>
<td style="text-align: right;">50</td>
<td style="text-align: right;">0.50</td>
<td style="text-align: right;">2500</td>
</tr>
<tr class="odd">
<td style="text-align: right;">150</td>
<td style="text-align: right;">100</td>
<td style="text-align: right;">50</td>
<td style="text-align: right;">0.33</td>
<td style="text-align: right;">2500</td>
</tr>
<tr class="even">
<td style="text-align: right;">50</td>
<td style="text-align: right;">100</td>
<td style="text-align: right;">50</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2500</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
<p>Check that MAE and MSE behave as expected (they don’t bias for under/over forecasts).</p>
</section>
<section id="mape-is-not-define-when-y_true-is-zero" class="level2">
<h2 class="anchored" data-anchor-id="mape-is-not-define-when-y_true-is-zero"><em>MAPE</em> is not define when <code>y_true</code> is zero</h2>
<p>The denominator of mape is <em>y_true</em>. So, MAPE might return <code>NaN</code> on your programming software or <code>Inf</code>. In order to “fix” it, what many people do is to set y_true to a small value near to zero, which is what <code>sklearn.metrics.mean_average_percentage_error</code> do (setting y_true to <img src="https://latex.codecogs.com/png.latex?2.22x10%5E-16">). But it gives other problems: 1. Setting y_true to <img src="https://latex.codecogs.com/png.latex?2.22x10%5E-16"> will lead to a even higher MAPE number; 2. You will never know a “true” value of the error for this series; 3. Your prediction will be compromised even if your predictions are really good (let’s say 0.00001); 4. If you need to concilliate the metric of this series with other series, your comparison will be compromised because the resulting MAPE will be towards a very high number.</p>
<p>In practical terms, see how MAPE will behave if for a true value of 0, we set 9E-17 for the last two rows of the table:</p>
<div style="width: 75%; margin: auto;">
<div id="tbl-impact" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-impact-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;2: Impact in MAPE when y_true is zero or near zero
</figcaption>
<div aria-describedby="tbl-impact-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: right;">y_true</th>
<th style="text-align: right;">y_pred</th>
<th style="text-align: right;">MAE</th>
<th style="text-align: right;">MAPE</th>
<th style="text-align: right;">MSE</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.5</td>
<td style="text-align: right;">0.5</td>
<td style="text-align: right;">#DIV/0!</td>
<td style="text-align: right;">0.25</td>
</tr>
<tr class="even">
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.5</td>
<td style="text-align: right;">1.5</td>
<td style="text-align: right;">#DIV/0!</td>
<td style="text-align: right;">2.25</td>
</tr>
<tr class="odd">
<td style="text-align: right;">9E-17</td>
<td style="text-align: right;">0.5</td>
<td style="text-align: right;">0.5</td>
<td style="text-align: right;">5.55x10^15</td>
<td style="text-align: right;">0.25</td>
</tr>
<tr class="even">
<td style="text-align: right;">9E-17</td>
<td style="text-align: right;">1.5</td>
<td style="text-align: right;">1.5</td>
<td style="text-align: right;">1.67x10^16</td>
<td style="text-align: right;">2.25</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
</div>
<p>Check that MAE and MSE behave as expected (are not impacted when y_true is zero or 9E-17).</p>
<p>Others also don’t calculate the forecast for these points, but you will end up with same problem as number 2.</p>
</section>
<section id="mape-does-not-minimizes-the-error-towards-the-mean-value" class="level2">
<h2 class="anchored" data-anchor-id="mape-does-not-minimizes-the-error-towards-the-mean-value">MAPE does not minimizes the error towards the mean value</h2>
<p>This is not a pitfall, but it is a warning, because usually people want to be right on <em>average</em>, and this is not what MAPE does. In constrast, it will give a prediction towards a biased median, if I can so.</p>
<p>A very good resource to read about is <a href="https://stats.stackexchange.com/questions/299712/what-are-the-shortcomings-of-the-mean-absolute-percentage-error-mape">shortcomings of MAPE</a>, that will lead to many other resources.</p>
</section>
</section>
<section id="alternatives" class="level1">
<h1>Alternatives</h1>
<p>In order to overcome the asymmetry problem of MAPE, sMAPE and other adjusted MAPEs were proposed, but no one of them have good properties: they are still undefined if <code>y_true</code> and <code>y_pred</code> are zero, <a href="https://robjhyndman.com/hyndsight/smape/">check it out</a>.</p>
<p>A really good alternative for this scenario is to use <strong>rRMSE</strong>, which is the relative Root mean squared error. All you need to do is to divide the RMSE by a value that will be used as a reference of your data. If we think on a time series problem, we can take the average value of all values of a series, or the last points equal to the length of the forecast, or any other length.</p>
<p>With it, you can have a unbiased metric, defined at zero, that it is easy to read and understand, because it is a percentage.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>MAPE</category>
  <category>Data Science</category>
  <category>Time Series</category>
  <guid>https://guilhermeparreira.github.io/posts/mape/</guid>
  <pubDate>Sat, 09 May 2026 03:00:00 GMT</pubDate>
  <media:content url="https://guilhermeparreira.github.io/posts/mape/ruff.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Ruff in a Nutshell + Configuring it on VsCode</title>
  <dc:creator>Guilherme Parreira</dc:creator>
  <link>https://guilhermeparreira.github.io/posts/ruff/</link>
  <description><![CDATA[ 





<div class="cell">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://guilhermeparreira.github.io/posts/ruff/ruff.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</div>
<p>Hello guys!</p>
<p>Today I want to talk about <a href="https://github.com/astral-sh/ruff">RUFF</a>, my default formatter (and much more) for Python language.</p>
<p>In a nutshell, RUFF can be seen as a tool that performs all these tasks:</p>
<p>RUFF = <code>Flake8</code> + <code>isort</code> + <code>black</code> + <code>pydocstyle</code> + <code>pyupgrade</code> + <code>autoflake</code></p>
<p><code>Flake8</code> = <code>Linter</code>, which fix style + syntax errors</p>
<p><code>isort</code> = <em>Sort</em> the imports</p>
<p><code>black</code> = <code>formatter</code> ; <code>PEP8</code> complaint. Ex.: line-length: 88; Single/Double quotes; empty lines; parenthesis</p>
<p><code>pydocstyle</code> = docstrings</p>
<p><code>pyupgrade</code> = upgrade syntax for newer versions of <code>python</code> packages</p>
<p><code>autoflake</code> = Remove unused imports and unused variables</p>
<p>So, instead of having to set up each one individually, use <code>RUFF</code> and have all these tools into a single one. <code>RUFF</code> was written in <code>rust</code>, so it is not a wrap of the previously mentioned. Also, it is way faster than the previous tools.</p>
<section id="setting-it-up-on-vscode" class="level2">
<h2 class="anchored" data-anchor-id="setting-it-up-on-vscode">Setting it up on VsCode</h2>
<p>To give suggestions on the fly, I use the <a href="https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff"><code>Ruff VsCode Extension</code></a>.</p>
<p>Besides that, I have my <code>settings.json</code> with my personal preferences:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb1-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Use</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Ruff</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">as</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">default</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">formatter</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">for</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Python</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">files</span></span>
<span id="cb1-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">python</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">":</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"editor.defaultFormatter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"charliermarsh.ruff"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"editor.codeActionsOnSave"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"source.fixAll"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"explicit"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"source.organizeImports"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"explicit"</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-9"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Formatter</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">for</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">notebook</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">cells</span></span>
<span id="cb1-10"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">jupyter</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">":</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"editor.defaultFormatter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"charliermarsh.ruff"</span></span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-13"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Enable</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">format</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">on</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">save</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">for</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">notebooks</span></span>
<span id="cb1-14"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"notebook.formatOnSave.enabled":</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">true,</span></span>
<span id="cb1-15"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Disable</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">other</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">formatters</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">to</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">avoid</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">conflicts</span></span>
<span id="cb1-16"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"editor.formatOnSave":</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">true,</span></span></code></pre></div>
<p>But these are only global settings in my personal environment.</p>
<p>Working with others on the same project can be painful if you don’t have a default formatter (because other team members can have different formatters and specifications); as a result, code may change the formatting for a new user. Therefore, having a <code>.vscode/settings.json</code> inside of the folder of your project guarantees that everyone will use the same formatted. For that, just copy your personal settings to <code>.vscode/settings.json</code>.</p>
<p>I also make <code>Ruff</code> as a default extension in <code>.vscode/settings.json</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"recommendations"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb2-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"charliermarsh.ruff"</span></span>
<span id="cb2-4">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Last but not least, you can also install <code>ruff</code> and your environment and implement it on your CI/CD routines. But it will not be covered here. Installing the extension and using the <code>.vscode/settings.json</code> guarantees that the suggestions will be made on the fly. But it depends on <code>VsCode</code>.</p>
</section>
<section id="bonus-caveat" class="level2">
<h2 class="anchored" data-anchor-id="bonus-caveat">Bonus (Caveat)</h2>
<p>I struggled to start using a tool like this because I used to write code in a single long line. I always received the <code>E501: line-too-long</code> warning from <code>black</code>. It happens when the number of characters in a line is longer than 79 characters, which is the recommendation in PEP 8. After applying a tool like <code>ruff</code> my code changed drastically (as it would force me to break lines), and it was uncomfortable in the beginning. So, I started to relax the parameter of the <code>line-length</code> a little bit (from 79 to for example, 150 characters) and started to analyze the impact of change. Then I realized that the impact on my previous code was not large at all.</p>
<p>Leaving the limit as the default, PEP 8 argues that you can open multiple files side by side, making also easier to see the <code>git diff</code> changes.</p>
<p>Anyway, if you think that this limit is small, you can relax it a little bit globally, doing it by:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.ruff]</span></span>
<span id="cb3-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line-length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">lint.ignore</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E501"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ignore long lines</span></span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E302"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ignore blank lines issue</span></span>
<span id="cb3-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E701"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ignore single-line if statements</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">extend-include</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.ipynb"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.ruff.format]</span></span>
<span id="cb3-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">quote-style</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span></span>
<span id="cb3-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">docstring-code-format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.ruff.lint.pydocstyle]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It enforces that all functions have docstrings</span></span>
<span id="cb3-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">convention</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"google"</span></span></code></pre></div>
<p>or skipping this rule by adding <code># fmt: skip</code> at the end of a line. Or use <code>#fmt: on</code> at the beginning of a block and <code>#fmt: off</code> at the end.</p>
<p>Happy coding.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Ruff</category>
  <category>Python</category>
  <category>VsCode</category>
  <guid>https://guilhermeparreira.github.io/posts/ruff/</guid>
  <pubDate>Sun, 01 Sep 2024 03:00:00 GMT</pubDate>
  <media:content url="https://guilhermeparreira.github.io/posts/ruff/ruff.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>My first post</title>
  <dc:creator>Guilherme Parreira</dc:creator>
  <link>https://guilhermeparreira.github.io/posts/welcome/</link>
  <description><![CDATA[ 





<p>Hello guys!</p>
<p>I will use the blog for sharing data science content.</p>
<p>I hope you all like.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Welcome</category>
  <guid>https://guilhermeparreira.github.io/posts/welcome/</guid>
  <pubDate>Sun, 01 Sep 2024 03:00:00 GMT</pubDate>
  <media:content url="https://guilhermeparreira.github.io/posts/welcome/welcome.png" medium="image" type="image/png" height="81" width="144"/>
</item>
</channel>
</rss>
